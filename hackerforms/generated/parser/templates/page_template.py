
###############################################################################
##             This file is generated by hackerforms-protocol.               ##
##        Do not change this file. Any changes will be overwritten.          ##
###############################################################################
page_template = """
import typing
from typing import Dict
from ..socket import send, receive
from .input_types import *
from .output_types import *

class WidgetSchema:
  def __init__(self):
    self.widgets: List[Union[Input, Output]] = []

  def convert_answer(self, form_answers: Dict) -> Dict:
    '''Convert the answer from the form to the expected format
    Args:
        answer: The answer from the form
    Returns:
        The converted answer
    '''
    answer: Dict = {}
    inputs = list(
        filter(lambda widget: isinstance(widget, Input), self.widgets))
    
    for input in inputs:
        answer[input.key] = input.convert_answer(form_answers[input.key])
    return answer

  def json(self):
    '''Get the json representation of the form
    Returns:
        The json representation of the form
    '''
    return [widget.json() for widget in self.widgets]

  def execute_js(self, code: str, **kwargs):
    '''Execute JavaScript on the page

    Args:
        code: The JS code to be executed
    Keyword Arg:
        context (dict): variables to be passed to the JS code
        key (string): The key of the return value on the form result. Defaults to empty string

    Returns:
        string: Serialized return value of the executed JavaScript
    '''

    key = kwargs.pop('key', 'js_result')
    self.widgets.append(ExecuteJs(key, code, **kwargs))
    return self

  {% for widget in input_widgets %}
  {% if input_widgets[widget]['func_name'] == 'read_text' %}
  def read(self, {{input_widgets[widget]['signature_params']}}):
    '''{%- for description in input_widgets[widget]['page_docs']['description'] -%}
      {{description}}
      {%- endfor %}

      Positional Arg(s):
        {% for positional_args in input_widgets[widget]['page_docs']['positional_arguments'] -%}
        {{positional_args}}
        {%- endfor %}
      
      Keyword Arg(s):
        {% for keyword_args in input_widgets[widget]['page_docs']['keyword_arguments'] -%}
        {{keyword_args}}
        {% endfor %}

      Returns:
        {{input_widgets[widget]['page_docs']['return_message']}}
    '''

    key = kwargs.pop('key', {{input_widgets[widget]['default_key']}})
    self.widgets.append({{widget}}(key, {{input_widgets[widget]['page_input']}}))
    return self 
  {%- else %}
  def {{input_widgets[widget]['func_name']}}(self, {{input_widgets[widget]['signature_params']}}):
    '''{%- for description in input_widgets[widget]['page_docs']['description'] -%}
      {{description}}
      {%- endfor %}

      Positional Arg(s):
        {% for positional_args in input_widgets[widget]['page_docs']['positional_arguments'] -%}
        {{positional_args}}
        {%- endfor %}
      
      Keyword Arg(s):
        {% for keyword_args in input_widgets[widget]['page_docs']['keyword_arguments'] -%}
        {{keyword_args}}
        {% endfor %}

      Returns:
        {{input_widgets[widget]['page_docs']['return_message']}}
    '''
    key = kwargs.pop('key', {{input_widgets[widget]['default_key']}})
    self.widgets.append({{widget}}(key, {{input_widgets[widget]['page_input']}}))
    return self
  {%- endif -%} 
  {% endfor %}

  {% for widget in output_widgets %}
  {% if output_widgets[widget]['func_name'] == 'display_text' %}
  def display(self, {{output_widgets[widget]['signature_params']}}):
    '''{%- for description in output_widgets[widget]['page_docs']['description'] -%}
      {{description}}
      {% endfor %}

      Positional Arg(s):
        {% for positional_args in output_widgets[widget]['page_docs']['positional_arguments'] -%}
        {{positional_args}}
        {% endfor %}
      
      Keyword Arg(s):
        {% for keyword_args in output_widgets[widget]['page_docs']['keyword_arguments'] -%}
        {{keyword_args}}
        {% endfor %}

      Returns:
        {{output_widgets[widget]['page_docs']['return_message']}}
    '''
    self.widgets.append({{widget}}({{output_widgets[widget]['page_input']}}))
    return self
  {%- else %}
  def {{output_widgets[widget]['func_name']}}(self, {{output_widgets[widget]['signature_params']}}):
    '''{%- for description in output_widgets[widget]['page_docs']['description'] -%}
      {{description}}
      {% endfor %}

      Positional Arg(s):
        {% for positional_args in output_widgets[widget]['page_docs']['positional_arguments'] -%}
        {{positional_args}}
        {% endfor %}
      
      Keyword Arg(s):
        {% for keyword_args in output_widgets[widget]['page_docs']['keyword_arguments'] -%}
        {{keyword_args}}
        {% endfor %}

      Returns:
        {{output_widgets[widget]['page_docs']['return_message']}}
    '''
    self.widgets.append({{widget}}({{output_widgets[widget]['page_input']}}))
    return self
  {%- endif -%} 
  {% endfor %}

class Page(WidgetSchema):
    '''A form page that can be displayed to the user

    This is a page that can be displayed to the user. It can be used to
    show data as well as collect informations. After configuring the
    inputs and outputs, use the run method to display the form to the
    user and collect the answers.
    '''

    def __init__(self):
        super().__init__()

    def run(self, button_text: str = 'Next', columns: float = 1) -> Dict:
        '''Run the form

        Args:
            button_text: The text of the button that is used to submit the form
            columns: The number of columns of the form

        Returns:
            The form result as a dict with the keys being the key of the input and the value being the value of the input
        '''
        send({
            'type': 'form',
            'widgets': self.json(),
            'buttonText': button_text,
            'columns': columns
        })
        form_answers: Dict = receive('payload')

        return self.convert_answer(form_answers)


class ListItemSchema(WidgetSchema):
    '''A schema for a list item

    This schema is used to define the schema of a list item.
    '''

    def __init__(self):
        super().__init__()

    def convert_answer(self, form_answers: Dict) -> Dict:
        '''Convert the answer from the form to the expected format

        Args:
            answer: The answer from the form

        Returns:
            The converted answer
        '''
        answer: Dict = form_answers
        inputs = list(
            filter(lambda widget: isinstance(widget, Input), self.widgets))

        for input in inputs:
            answer[input.key] = input.convert_answer(form_answers[input.key])
        return answer
"""
